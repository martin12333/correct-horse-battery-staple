#!/usr/bin/env ruby

require 'rubygems'
require 'open-uri'
require 'bigdecimal'
require 'fastercsv'

require 'correct_horse_battery_staple'

# urls = %w[
#   data/1-10000
#   data/10001-20000
#   data/20001-30000
#   data/30001-40000
#   data/40001-50000
#   data/50001-60000
# ]

  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/1-10000
  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/10001-20000
  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/20001-30000
  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/30001-40000
  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/40001-50000
  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/50001-60000
  # http://en.wiktionary.org/wiki/Wiktionary:Frequency_lists/PG/2005/08/60001-70000

parser_class = CorrectHorseBatteryStaple::Parser::Regex

urls = ARGV

words = urls.map do |url|
  parser_class.new.parse open(url)
end.reduce(:+).sort

# total number of words
count       = words.length

# assign ranks
words.each_with_index {|word, i| word.rank = count-i }

frequencies = CorrectHorseBatteryStaple::StatisticalArray.new(words.map {|pair| pair.frequency })
total       = frequencies.reduce(BigDecimal.new("0"), :+)

(prob_mean, prob_stddev) = CorrectHorseBatteryStaple::StatisticalArray.new(frequencies.map {|freq| (freq/total) * 100}).
                           mean_and_standard_deviation
(mean, stddev)           = frequencies.mean_and_standard_deviation

puts "index,rank,word,frequency,percentile,distance,probability,distance_probability"
words.each_with_index do |wstruct, index|
  word            = wstruct.word
  freq            = wstruct.frequency
  distance        = (freq-mean)/stddev
  probability     = freq/total
  distance_prob   = (probability - prob_mean) / prob_stddev
  percentile      = (index-0.5)/count * 100
  printf("%d,%d,%s,%d,%.4f,%.6f,%.8f,%.8f\n", index, wstruct.rank, word, freq,
    percentile, distance, probability * 100, distance_prob)
end

# -*- mode: Ruby; compile-command; ./mkcorpus.rb -*-
