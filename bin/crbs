#!/usr/bin/env ruby

require 'correct_horse_battery_staple'
require 'correct_horse_battery_staple/assembler'
require 'commander/import'

program :version, "0.1.0"
program :description, "Correct Horse Battery Staple - XKCD-style Passphrases"

global_option '-D', '--debug', 'Display full protocol trace'
global_option '-V', '--verbose', 'Shows request and response'

command :generate do |c|
  c.syntax = 'generate [<number of words>]'
  c.summary = 'Generate a passphrase with a given number of words'
  #c.description = ''
  #c.example 'description', 'command example'
  c.option '--wordsize MIN..MAX', 'Set the allowed word size in # of characters'
  c.option '-n COUNT', '--repeat COUNT', 'How many passwords to generate'
  c.action do |args, options|
    options.default :wordsize => "3..6", :repeat => 1

    number_of_words = (args[0] || 4).to_i
    wordsize = Range.new *options.wordsize.split('..').map {|x| x.to_i}
    count = options.repeat.to_i

    corpus = CorrectHorseBatteryStaple.default_corpus
    puts "loaded corpus!" if options.debug
    if options.verbose
      puts "Entropy: 2^#{count * corpus.entropy_per_word.floor} bits"
    end

    count.times do
      puts CorrectHorseBatteryStaple::Generator.new(corpus, wordsize).
        make(number_of_words)
    end
  end
end

command :mkcorpus do |c|
  c.syntax = 'mkcorpus file [file, file, ...]'
  c.summary = 'Generate a JSON or CSV corpus from an input file'
  #c.description = ''
  #c.example 'description', 'command example'
  c.option '-i FORMAT', '--iformat FORMAT', 'Set the input format'
  c.option '-o FORMAT', '--oformat FORMAT', 'Set the output format'
  c.action do |args, options|
    options.default :iformat => "wiktionary", :oformat => "json"

    assembler = CorrectHorseBatteryStaple::Assembler.new(
      CorrectHorseBatteryStaple::Parser::Regex.new(options.iformat.to_sym))
    assembler.read(args)
    assembler.process
    case options.oformat.to_sym
      when :json    then assembler.save_as_json(STDOUT)
      when :csv     then assembler.save_as_csv(STDOUT)
      when :marshal then assembler.save_as_marshal(STDOUT)      
      else raise ArgumentError, "Supported output formats are 'json' and 'csv'"
    end
  end
end

